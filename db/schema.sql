CREATE TABLE users (
  id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  name varchar(255) NOT NULL,
  email varchar(255) NOT NULL,
  password_hash varchar(255) NOT NULL,
  user_type int NOT NULL DEFAULT 0,
  CONSTRAINT unique_user_email UNIQUE (email),
  CONSTRAINT users_pkey PRIMARY KEY (id)
);

CREATE TABLE audio (
  id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  name varchar(255) NOT NULL,
  description text,
  audio_date date,
  upload_date timestamp NOT NULL,
  CONSTRAINT audio_pkey PRIMARY KEY (id)
);

CREATE TABLE audit_logs (
  id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  user_id int NOT NULL,
  type varchar(255) NOT NULL,
  data jsonb NOT NULL,
  create_time timestamp NOT NULL,
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT fk_audit_logs_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE tag_category (
  id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  name varchar(255) NOT NULL,
  CONSTRAINT unique_tag_category_name UNIQUE (name),
  CONSTRAINT tag_category_pkey PRIMARY KEY (id)
);

CREATE TABLE tags (
  id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  category_id int NOT NULL,
  name varchar(255),
  CONSTRAINT tags_pkey PRIMARY KEY (id)
);

CREATE TABLE audio_tag (
  audio_id int NOT NULL,
  tag_id int NOT NULL,
  CONSTRAINT unique_audio_tags UNIQUE (audio_id, tag_id),
  CONSTRAINT fk_audio_tag_audio_id FOREIGN KEY (audio_id) REFERENCES audio (id) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT fk_audio_tag_tag_id FOREIGN KEY (tag_id) REFERENCES tags (id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE transcripts (
  id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  audio_id int NOT NULL,
  text text NOT NULL,
  revision_comment text,
  is_latest bool DEFAULT true,
  CONSTRAINT transcripts_pkey PRIMARY KEY (id),
  CONSTRAINT fk_audio_id FOREIGN KEY (audio_id) REFERENCES audio (id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE user_edit_request (
  id int NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  user_id int NOT NULL,
  transcript_id int NOT NULL,
  text text NOT NULL,
  edit_comment text,
  request_approved bool,
  create_time timestamp NOT NULL,
  CONSTRAINT user_edit_request_pkey PRIMARY KEY (id),
  CONSTRAINT fk_user_edit_request_transcript_id FOREIGN KEY (transcript_id) REFERENCES transcripts (id) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT fk_user_edit_request_user_id FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE VIEW admin_transcript_edit_requests AS SELECT
    user_edit_request.id AS request_id,
    user_edit_request.user_id,
    transcripts.id AS transcript_id,
    audio.name AS audio_name,
    transcripts.text AS old_text,
    user_edit_request.text AS new_text,
    user_edit_request.edit_comment,
    user_edit_request.create_time AS request_time,
    user_edit_request.request_approved AS approval_status
   FROM user_edit_request
     JOIN transcripts ON user_edit_request.transcript_id = transcripts.id
     JOIN audio ON audio.id = transcripts.audio_id
  WHERE user_edit_request.request_approved IS NULL;

CREATE VIEW results AS SELECT
    audio.id,
    audio.name,
    audio.upload_date,
    transcripts.text AS transcript_text
   FROM audio
     JOIN transcripts ON transcripts.audio_id = audio.id
  WHERE transcripts.is_latest = true;

CREATE VIEW transcript_requests AS SELECT
    user_edit_request.id AS request_id,
    user_edit_request.user_id,
    transcripts.id AS transcript_id,
    audio.name AS audio_name,
    transcripts.text AS old_text,
    user_edit_request.text AS new_text,
    user_edit_request.edit_comment,
    user_edit_request.create_time AS request_time
   FROM user_edit_request
     JOIN transcripts ON user_edit_request.transcript_id = transcripts.id
     JOIN audio ON audio.id = transcripts.audio_id
  WHERE user_edit_request.request_approved IS NULL;

CREATE VIEW filters AS SELECT
    tags.id AS tag_id,
    tag_category.name AS category_name,
    tags.name AS tag_name
   FROM tags
     JOIN tag_category ON tag_category.id = tags.category_id;
